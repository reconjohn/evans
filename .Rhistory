model='
Electoralprocessandpluralism + Functioningofgovernment + Politicalparticipation + Politicalculture + Civilliberties
'
fitNUM<-cfa(model, data = subDemo,std.lv=TRUE)
model='
democracy=~Electoralprocessandpluralism + Functioningofgovernment + Politicalparticipation + Politicalculture + Civilliberties
'
fitNUM<-cfa(model, data = subDemo,std.lv=TRUE)
fitNUM
fitNUM<-cfa(model, data = subDemo)
fitNUM
fitNUM<-cfa(model, data = subDemo,std.lv=TRUE)
fitNUM<-cfa(model, data = subDemo,std.lv=TRUE)
indexCFA=lavPredict(fitNUM)
## ---- eval=TRUE----------------------------------------------------------
fromPy$dem_FA=as.vector(indexCFANorm)
indexCFANorm
# class(indexCFANorm)
dim(indexCFANorm)
# class(indexCFANorm)
# dim(indexCFANorm)
# class(c(indexCFANorm))
dim(as.vector(indexCFANorm))
## ---- eval=TRUE----------------------------------------------------------
library(ggplot2)
base=ggplot(data=fromPy)
base + geom_histogram(aes(x=dem_FA))
dem_FA
## ------------------------------------------------------------------------
base + geom_boxplot(aes(y=dem_FA))
## ------------------------------------------------------------------------
evalCFA1=parameterEstimates(fitNUM, standardized =TRUE)
## ----echo=FALSE----------------------------------------------------------
evalCFA1[evalCFA1$op=="=~",c('rhs','std.all','pvalue')]
fitNUM
indexCFA
## ------------------------------------------------------------------------
evalCFA1=parameterEstimates(fitNUM, standardized =TRUE)
evalCFA1
## ----echo=FALSE----------------------------------------------------------
evalCFA1[evalCFA1$op=="=~",c('rhs','std.all','pvalue')]
## ---- echo=FALSE---------------------------------------------------------
evalCFA2=as.list(fitMeasures(fitNUM))
evalCFA2
fitMeasures(fitNUM)
list(fitMeasures(fitNUM))
list(fitMeasures(fitNUM))
as.list(fitMeasures(fitNUM))
## ------------------------------------------------------------------------
evalCFA2[c("chisq", "df", "pvalue")]
## ----echo=FALSE----------------------------------------------------------
evalCFA2$tli # > 0.90
evalCFA2
## ------------------------------------------------------------------------
evalCFA2[c("chisq", "df", "pvalue")]
## ----echo=FALSE----------------------------------------------------------
evalCFA2$tli # > 0.90
## ----echo=FALSE----------------------------------------------------------
evalCFA2[c( 'rmsea.ci.lower','rmsea','rmsea.ci.upper')]
## ---- echo=FALSE---------------------------------------------------------
library(semPlot)
semPaths(fitNUM, what='std', nCharNodes=10, sizeMan=8,
edge.label.cex=1.5, fade=T,residuals = F)
## ---- echo=FALSE---------------------------------------------------------
library(semPlot)
semPaths(fitNUM, what='std', nCharNodes=10, sizeMan=8,
edge.label.cex=1.5, fade=T,residuals = F)
## ------------------------------------------------------------------------
dfClus=fromPy[,c(2,13,16)]
dfClus
## ------------------------------------------------------------------------
#from
head(dfClus)
## ------------------------------------------------------------------------
#to
row.names(dfClus)=fromPy$Country
head(dfClus)
## ------------------------------------------------------------------------
dfClus=dfClus[complete.cases(dfClus),]
dfClus
complete.cases(dfClus)
## ------------------------------------------------------------------------
dfClus=dfClus[complete.cases(dfClus),]
## ------------------------------------------------------------------------
library(cluster)
dfClus_D=cluster::daisy(x=dfClus,metric="gower")
dfClus_D
## ------------------------------------------------------------------------
set.seed(123)
numberOfClusters=4
res.pam = pam(x=dfClus_D,k = numberOfClusters,cluster.only = F)
res.pam
## ------------------------------------------------------------------------
fromPy$pam=as.factor(res.pam$clustering)
fromPy$pam
## ------------------------------------------------------------------------
fromPy[fromPy$pam==1,'Country']
## ------------------------------------------------------------------------
fromPy[fromPy$Country=="Peru",'pam']
## ------------------------------------------------------------------------
pamEval=as.data.frame.array(silhouette(res.pam))
pamEval
res.pam
pamEval
pamEval$country=row.names(pamEval)
row.names(pamEval)=NULL
pamEval
## ------------------------------------------------------------------------
pamEval=as.data.frame.array(silhouette(res.pam))
pamEval$country=row.names(pamEval)
pamEval
## ------------------------------------------------------------------------
pamEval=as.data.frame.array(silhouette(res.pam))
pamEval$country=row.names(pamEval)
pamEval
row.names(pamEval)=NULL
pamEval
aggregate(data=pamEval,sil_width~cluster,FUN=mean)
## ------------------------------------------------------------------------
head(pamEval)
## ------------------------------------------------------------------------
pamEval[pamEval$sil_width<0,]
## ------------------------------------------------------------------------
pamEval_O=pamEval[order(pamEval$cluster,pamEval$sil_width),]
pamEval_O
order(pamEval$cluster,pamEval$sil_width)
pamEval_O
## ------------------------------------------------------------------------
clusterVal=1
pamEval=pamEval_O[pamEval_O$cluster==clusterVal,]
pamEval
base=ggplot(data=pamEval,
aes(x=country,
y=sil_width))
sil1= base + geom_bar(stat='identity')
sil1= sil1 + scale_x_discrete(limits=pamEval$country)
sil1= sil1 + theme(axis.text.x = element_text(angle = 80,
size = 6,
hjust = 1))
sil1
pamEval_O
fromGit="https://github.com/reconjohn/evans/raw/master/world_map.json" # link desde github
## ------------------------------------------------------------------------
# installed?
#library(sp)
#library(geojsonio)
library(rgdal)
fromGit="https://github.com/reconjohn/evans/raw/master/world_map.json" # link desde github
mapWorld <- rgdal::readOGR(fromGit,stringsAsFactors = FALSE)
## ---- eval=TRUE----------------------------------------------------------
plot(mapWorld)
## ---- eval=TRUE----------------------------------------------------------
# see data in map
head(mapWorld@data)
## ---- eval=TRUE----------------------------------------------------------
mapWorldAll=merge(mapWorld, #map first
fromPy,
by.x='NAME', # common column
by.y='Country', # common column
all.x=F) # reduced map.
## ---- eval=TRUE----------------------------------------------------------
# what:
varToPlot=mapWorldAll$pam
#which colors:
library(RColorBrewer)
colorForScale='YlOrRd'
palette = brewer.pal(numberOfClusters, colorForScale)
## base layer - coloring missing data
plot(mapWorld,col='grey',border=0)
## top layer
plot(mapWorldAll, col = palette[varToPlot],border=F,add=T)
legend('left', legend = c("TOP","GOOD","BAD","POOR"),
fill = palette,
cex = 0.6,
bty = "n",
title="Clusters")
## ---- eval=TRUE----------------------------------------------------------
# see data in map
head(mapWorld@data)
mapWorldAll
fromPy
names(fromPy)
names(mapWorld)
mapWorldAll$pam
## ---- eval=TRUE----------------------------------------------------------
# what:
varToPlot=mapWorldAll$pam
## base layer - coloring missing data
plot(mapWorld,col='grey',border=0)
## top layer
plot(mapWorldAll, col = palette[varToPlot],border=F,add=T)
legend('left', legend = c("TOP","GOOD","BAD","POOR"),
fill = palette,
cex = 0.6,
bty = "n",
title="Clusters")
# The more democratic and the better HDI
# the less contaminated a country is,
# controlling continent
#row.names(fromPy)=fromPy$Country
hypo1=formula(co2_in_MT~ dem_FA + Humandevelopmentindex + Continent)
hypo1
regre1=glm(hypo1,data = fromPy,family = 'gaussian')
## ------------------------------------------------------------------------
summary(regre1)
## ------------------------------------------------------------------------
summary(regre1)
## ------------------------------------------------------------------------
library(sjPlot)
plot_models(regre1,vline.color = "grey")
hypo2=formula(HDIdico~ dem_FA + co2_in_MT + Continent)
regre2=glm(hypo2,data = fromPy,family = "binomial")
hypo2=formula(HDIdico~ dem_FA + co2_in_MT + Continent)
regre2=glm(hypo2,data = fromPy,family = "binomial")
names(fromPy)
hypo2=formula(Humandevelopmentindex~ dem_FA + co2_in_MT + Continent)
regre2=glm(hypo2,data = fromPy,family = "binomial")
## ------------------------------------------------------------------------
fromPy$HDIdico=ifelse(fromPy$Humandevelopmentindex>
median(fromPy$Humandevelopmentindex),
1,0)
hypo2=formula(HDIdico~ dem_FA + co2_in_MT + Continent)
regre2=glm(hypo2,data = fromPy,family = "binomial")
## ------------------------------------------------------------------------
fromPy%>%
mutate(HDIdico = ifelse(Humandevelopmentindex>median(Humandevelopmentindex),
1, 0))%>%
select(Country,HDIdico)
## ------------------------------------------------------------------------
summary(regre2)
## ------------------------------------------------------------------------
# interpracion usando marginal effects:
library(margins)
#
(model = margins(regre2))
## ------------------------------------------------------------------------
(margins=summary(model))
base= ggplot(margins,aes(x=factor, y=AME)) + geom_point()
plot2 = base + theme(axis.text.x = element_text(angle = 80,
size = 6,
hjust = 1))
plot2
## ------------------------------------------------------------------------
plot2 +  geom_errorbar(aes(ymin=lower, ymax=upper))
lower
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
link='https://github.com/reconjohn/evan_data/raw/master/data.RDS'
# a RDS file from the web needs:
myFile=url(link)
# reading in data:
fromPy=readRDS(file = myFile)
# reading in data:
fromPy=readRDS(file = myFile)
# reset indexes to R format:
row.names(fromPy)=NULL
str(fromPy)#,width = 70,strict.width='cut')
names(fromPy)
fromPy[2,3]
fromPy[2,]
fromPy[,3]
fromPy
fromPy[2,3]
fromPy[2,]
fromPy[2,]
fromPy[,3]
fromPy[2,]
fromPy[2,]
# by position:
fromPy[2,c(1,5:7)]
link='https://github.com/reconjohn/evans/raw/master/hdidemocia.RDS'
# a RDS file from the web needs:
myFile=url(link)
# reading in data:
fromPy=readRDS(file = myFile)
# reset indexes to R format:
row.names(fromPy)=NULL
str(fromPy)#,width = 70,strict.width='cut')
names(fromPy)
fromPy[2,3]
fromPy[2,]
fromPy[,3]
# by position:
fromPy[2,c(1,5:7)]
# by value:
fromPy[2,c('Country','Continent', 'Score')]
# create new column:
fromPy$ZERO=0
# then:
head(fromPy)
# replace column values:
fromPy$ZERO=1
# then:
head(fromPy)
# DELETE column:
fromPy$ZERO=NULL
# then:
names(fromPy)
# then:
head(fromPy)
# you could get more than one
condition1=fromPy$Humandevelopmentindex==max(fromPy$Humandevelopmentindex)
fromPy[condition1,]
#or
fromPy[condition1,'Country']
# in multiple max, you get only the first one.
fromPy[which.max(fromPy$Humandevelopmentindex),'Country']
# from AMERICA:
AMERICA=c('South America','North America')
condition2=fromPy$Continent %in% AMERICA
condition2
subAmerica=fromPy[condition2,]
subAmerica[condition1,'Country']
condition2
subAmerica
subAmerica[condition1,'Country']
condition1
condition1
subAmerica
subAmerica[condition1,'Country']
library(magrittr)
library(dplyr)
fromPy%>%
filter(Continent %in% AMERICA)%>%
filter(Humandevelopmentindex==max(Humandevelopmentindex))%>%
select(Country)
condition2
condition2
subAmerica=fromPy[condition2,]
condition1
fromPy%>%
filter(!Continent %in% AMERICA)%>%
filter(Humandevelopmentindex==max(Humandevelopmentindex))%>%
select(Country)
# the result is a data frame:
aggregate(data=fromPy,Humandevelopmentindex ~ Continent,FUN=mean)
# the result is a data frame:
aggregate(data=fromPy,Humandevelopmentindex ~ Continent,FUN=mean)
fromPy%>%
group_by(Continent) %>%
summarise(mean(Humandevelopmentindex))
fromPy%>%
group_by(Continent) %>%
summarise(meanHDI=mean(Humandevelopmentindex),
medianHDI=median(Humandevelopmentindex))
# several columns in cbind...
aggregate(data=fromPy,
cbind(Electoralprocessandpluralism,Functioningofgovernment,
Politicalparticipation,Politicalculture,
Civilliberties)~Continent,
FUN=median)
dim(subAmerica)
dim(condition1)
condition1
dim(condition1)
length(condition1)
subAmerica[condition1,'Country']
link='https://github.com/reconjohn/evan_data/raw/master/data.RDS'
# a RDS file from the web needs:
myFile=url(link)
# reading in data:
fromPy=readRDS(file = myFile)
# reset indexes to R format:
row.names(fromPy)=NULL
str(fromPy)#,width = 70,strict.width='cut')
names(fromPy)
fromPy[2,3]
fromPy[2,]
fromPy[,3]
head(fromPy[,3])
# by position:
fromPy[2,c(1,5:7)]
# by position:
fromPy[2,c(2:#)]
# by position:
fromPy[2,c(2:3)]
# by position:
fromPy[2,c(2:3)]
# by position:
fromPy[2,c(2,3)]
# by value:
fromPy[2,c('Year','SolarCapacityGW')]
# by value:
fromPy[20,c('Year','SolarCapacityGW')]
# by value:
fromPy[20,c('Entity','Year','SolarCapacityGW')]
# then:
head(fromPy)
# replace column values:
fromPy$ZERO=1
# then:
head(fromPy)
# DELETE column:
fromPy$ZERO=NULL
# then:
names(fromPy)
# you could get more than one
condition1=fromPy$SolarCapacityGW==max(fromPy$SolarCapacityGW)
fromPy[condition1,]
#or
fromPy[condition1,'Entity']
# in multiple max, you get only the first one.
fromPy[which.max(fromPy$SolarCapacityGW),'Entity']
View(fromPy)
# from AMERICA:
N_AMERICA=c('Canada','United States')
condition2=fromPy$Entity %in% AMERICA
subN_America=fromPy[condition2,]
subAmerica[condition1,'Entity']
condition1
condition2
condition1=subN_America$SolarCapacityGW==max(subN_America$SolarCapacityGW)
subAmerica[condition1,'Entity']
condition1=subN_America$SolarCapacityGW==max(subN_America$SolarCapacityGW)
max(subN_America$SolarCapacityGW)
SubN_America=fromPy[condition2,]
View(SubN_America)
condition2=fromPy$Entity %in% N_AMERICA
SubN_America=fromPy[condition2,]
SubN_America
condition1=SubN_America$SolarCapacityGW==max(SubN_America$SolarCapacityGW)
SubAmerica[condition1,'Entity']
SubN_America[condition1,'Entity']
library(magrittr)
library(dplyr)
fromPy%>%
filter(Entity %in% SubN_AMERICA)%>%
filter(SolarCapacityGW==max(SolarCapacityGW))%>%
select(Entity)
fromPy%>%
filter(Entity %in% N_AMERICA)%>%
filter(SolarCapacityGW==max(SolarCapacityGW))%>%
select(Entity)
subNotAmerica=fromPy[!condition2,]
# from AMERICA:
N_AMERICA=c('Canada','United States')
condition2=fromPy$Entity %in% N_AMERICA
subN_America=fromPy[condition2,]
condition1=subN_America$SolarCapacityGW==max(subN_America$SolarCapacityGW)
subN_America[condition1,'Entity']
fromPy%>%
filter(Entity %in% N_AMERICA)%>%
filter(SolarCapacityGW==max(SolarCapacityGW))%>%
select(Entity)
subNotAmerica=fromPy[!condition2,]
subNotAmerica[condition1,'Country']
subNotAmerica
subNotAmerica[condition1,'Entity']
fromPy%>%
filter(!Entity %in% N_AMERICA)%>%
filter(SolarCapacityGW==max(SolarCapacityGW))%>%
select(Country)
fromPy%>%
filter(!Entity %in% N_AMERICA)%>%
filter(SolarCapacityGW==max(SolarCapacityGW))%>%
select(Entity)
# the result is a data frame:
aggregate(data=fromPy,SolarCapacityGW ~ Entity,FUN=mean)
fromPy%>%
filter(!Entity %in% N_AMERICA)%>%
filter(SolarCapacityGW==max(SolarCapacityGW))%>%
select(Entity)
fromPy%>%
group_by(Entity) %>%
summarise(mean(SolarCapacityGW))
fromPy%>%
group_by(Entity) %>%
summarise(meanHDI=mean(SolarCapacityGW),
medianHDI=median(SolarCapacityGW))
fromPy%>%
group_by(Entity) %>%
summarise(meanGW=mean(SolarCapacityGW),
medianGW=median(SolarCapacityGW))
# several columns in cbind...
aggregate(data=fromPy,
cbind(Entity, Year)~Entity,
FUN=median)
# several columns in cbind...
aggregate(data=fromPy,
cbind(Year, SolarCapacityGW)~Entity,
FUN=median)
fromPy[complete.cases(fromPy),]
# In ".~ Entity" the dot represents all the other variables
aggregate(data=fromPy[,c(2,3)],.~Entity,FUN=median)
# several columns in cbind...
aggregate(data=fromPy,
cbind(Year, SolarCapacityGW)~Entity,
FUN=median)
fromPy[,c(2,3)]
fromPy[,c(1:3)]
# In ".~ Entity" the dot represents all the other variables
aggregate(data=fromPy[,c(1:3)],.~Entity,FUN=median)
fromPy[,c(1:3)]%>%
group_by(Entity) %>%
summarise_all(list(median))
fromPy[,c(1:3)]%>%
group_by(Entity) %>%
summarise_all(list(MIN=min,MAX=max))
# AboveGW is the new variable:
# 1 if the value is < median, ) otherwise.
fromPy$AboveGW=ifelse(fromPy$SolarCapacityGW>
median(fromPy$SolarCapacityGW),
1,0)
# then:
head(fromPy)
# you will add a new column at the end (this is a preview):
fromPy%>%
mutate(AboveGW =ifelse(SolarCapacityGW >
median(SolarCapacityGW),
1, 0))%>%head()
aggregate(data=fromPy,SolarCapacityGW ~ Entity,FUN=function(x) cbind(mean(x), median(x)))
aggregate(data=fromPy,SolarCapacityGW ~ Entity,FUN=function(x) cbind(mean(x), median(x)))
